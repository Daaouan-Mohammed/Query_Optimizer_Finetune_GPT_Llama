query,optimized query
SELECT * FROM Professor WHERE first_name = 'John';,SELECT professor_id, last_name FROM Professor WHERE first_name = 'John' INDEX(first_name);
SELECT * FROM Course WHERE course_code = 'MATH101';,SELECT course_id, course_name, credit_hours FROM Course WHERE course_code = 'MATH101' INDEX(course_code);
SELECT * FROM Enrollment WHERE student_id IN (10, 20, 30);,SELECT course_id FROM Enrollment WHERE student_id IN (10, 20, 30) INDEX(student_id);
SELECT * FROM Classroom WHERE building_name = 'Main Building';,SELECT classroom_id, room_number, capacity FROM Classroom WHERE building_name = 'Main Building' INDEX(building_name);
SELECT * FROM Exam WHERE course_id = 1 AND exam_date > '2024-02-08';,SELECT exam_id, exam_date, exam_duration FROM Exam WHERE course_id = 1 AND exam_date > '2024-02-08' INDEX(course_id, exam_date);
SELECT * FROM Department WHERE department_code = 'CS';,SELECT department_id, department_name FROM Department WHERE department_code = 'CS' INDEX(department_code);
SELECT * FROM ClassSchedule WHERE start_time BETWEEN '08:00:00' AND '09:00:00';,SELECT course_id, classroom_id FROM ClassSchedule WHERE start_time BETWEEN '08:00:00' AND '09:00:00' INDEX(start_time);
SELECT * FROM Student WHERE date_of_birth < '2000-01-01';,SELECT student_id, first_name, last_name FROM Student WHERE date_of_birth < '2000-01-01' INDEX(date_of_birth);
SELECT * FROM Course WHERE professor_id = 5 AND department_id = 2;,SELECT course_id, course_name, course_code FROM Course WHERE professor_id = 5 AND department_id = 2 INDEX(professor_id, department_id);
SELECT * FROM Enrollment WHERE course_id = 10 GROUP BY student_id;,SELECT student_id, COUNT(*) AS enrolled_courses FROM Enrollment WHERE course_id = 10 GROUP BY student_id INDEX(course_id);
SELECT * FROM Course WHERE credit_hours = 3 AND department_id = 1;,SELECT course_id, course_name, course_code FROM Course WHERE credit_hours = 3 AND department_id = 1 INDEX(credit_hours, department_id);
SELECT first_name, last_name FROM Student WHERE email LIKE '%@gmail.com';,SELECT first_name, last_name FROM Student WHERE email LIKE '%@gmail.com%' INDEX(email);
SELECT * FROM Exam WHERE exam_date BETWEEN '2023-12-01' AND '2023-12-31';,SELECT exam_id, course_id, exam_date FROM Exam WHERE exam_date BETWEEN '2023-12-01' AND '2023-12-31' INDEX(exam_date);
SELECT * FROM Classroom WHERE capacity > 30;,SELECT classroom_id, building_name, room_number FROM Classroom WHERE capacity > 30 INDEX(capacity);
SELECT * FROM Enrollment WHERE student_id = 123 AND enrollment_date >= '2024-01-01';,SELECT course_id, enrollment_date FROM Enrollment WHERE student_id = 123 AND enrollment_date >= '2024-01-01' INDEX(student_id, enrollment_date);
SELECT * FROM Professor WHERE department_id IN (1, 2, 3);,SELECT professor_id, first_name, last_name FROM Professor WHERE department_id IN (1, 2, 3) INDEX(department_id);
SELECT * FROM ClassSchedule WHERE day_of_week = 'Monday';,SELECT course_id, classroom_id, start_time, end_time FROM ClassSchedule WHERE day_of_week = 'Monday' INDEX(day_of_week);
SELECT * FROM Department WHERE department_name LIKE '%Computer%';,SELECT department_id, department_name, department_code FROM Department WHERE department_name LIKE '%Computer%' INDEX(department_name);
SELECT * FROM Student ORDER BY last_name DESC;,SELECT student_id, first_name, last_name FROM Student ORDER BY last_name DESC INDEX(last_name);
SELECT * FROM Course WHERE course_name = 'Introduction to AI';,SELECT course_id, course_name, course_code FROM Course WHERE course_name = 'Introduction to AI' INDEX(course_name);
SELECT * FROM Student WHERE last_name LIKE 'A%';,SELECT student_id, first_name, last_name FROM Student WHERE last_name LIKE 'A%' INDEX(last_name);
SELECT * FROM Professor WHERE email IS NOT NULL;,SELECT professor_id, first_name, last_name FROM Professor WHERE email IS NOT NULL INDEX(email);
SELECT * FROM Course WHERE credit_hours > 4 ORDER BY credit_hours DESC;,SELECT course_id, course_name, credit_hours FROM Course WHERE credit_hours > 4 ORDER BY credit_hours DESC INDEX(credit_hours);
SELECT * FROM Enrollment WHERE enrollment_date >= '2024-02-01' AND enrollment_date <= '2024-02-08';,SELECT student_id, course_id FROM Enrollment WHERE enrollment_date >= '2024-02-01' AND enrollment_date <= '2024-02-08' INDEX(enrollment_date);
SELECT * FROM Classroom WHERE capacity < 20;,SELECT classroom_id, building_name, room_number FROM Classroom WHERE capacity < 20 INDEX(capacity);
SELECT * FROM Exam WHERE exam_duration > 120;,SELECT exam_id, course_id, exam_date FROM Exam WHERE exam_duration > 120 INDEX(exam_duration);
SELECT * FROM Department WHERE department_name IN ('English', 'Mathematics');,SELECT department_id, department_name, department_code FROM Department WHERE department_name IN ('English', 'Mathematics') INDEX(department_name);
SELECT * FROM ClassSchedule WHERE day_of_week = 'Wednesday' AND classroom_id = 5;,SELECT course_id, start_time, end_time FROM ClassSchedule WHERE day_of_week = 'Wednesday' AND classroom_id = 5 INDEX(day_of_week, classroom_id);
SELECT * FROM Student WHERE address LIKE '%City Center%';,SELECT student_id, first_name, last_name FROM Student WHERE address LIKE '%City Center%' INDEX(address);
SELECT * FROM Course WHERE course_code BETWEEN 'CS101' AND 'CS200';,SELECT course_id, course_name, credit_hours FROM Course WHERE course_code BETWEEN 'CS101' AND 'CS200' INDEX(course_code);
SELECT * FROM Enrollment WHERE student_id NOT IN (1, 2, 3);,SELECT course_id FROM Enrollment WHERE student_id NOT IN (1, 2, 3) INDEX(student_id);
SELECT * FROM Classroom WHERE building_name LIKE '%East%';,SELECT classroom_id, room_number, capacity FROM Classroom WHERE building_name LIKE '%East%' INDEX(building_name);
SELECT * FROM Exam WHERE course_id = 15 AND exam_date < '2024-02-08';,SELECT exam_id, exam_duration FROM Exam WHERE course_id = 15 AND exam_date < '2024-02-08' INDEX(course_id, exam_date);
SELECT * FROM Department WHERE department_code LIKE '%ENG%';,SELECT department_id, department_name FROM Department WHERE department_code LIKE '%ENG%' INDEX(department_code);
SELECT * FROM ClassSchedule WHERE start_time >= '10:00:00';,SELECT course_id, classroom_id FROM ClassSchedule WHERE start_time >= '10:00:00' INDEX(start_time);
SELECT * FROM Student WHERE date_of_birth BETWEEN '1995-01-01' AND '2000-01-01';,SELECT * FROM Student WHERE date_of_birth BETWEEN '1995-01-01' AND '2000-01-01';
SELECT * FROM Course WHERE professor_id IS NOT NULL;,SELECT course_id, course_name, department_id FROM Course WHERE professor_id IS NOT NULL INDEX(professor_id);
SELECT * FROM Enrollment WHERE course_id = 20 GROUP BY student_id HAVING COUNT(*) > 2;,SELECT student_id, COUNT(*) AS enrolled_courses FROM Enrollment WHERE course_id = 20 GROUP BY student_
SELECT * FROM employees WHERE salary > 5000;,SELECT employee_id, name FROM employees WHERE salary > 5000;
SELECT * FROM orders WHERE order_date > '2022-01-01';,SELECT order_id, customer_id, order_date FROM orders WHERE order_date > '2022-01-01';
SELECT customer_name, COUNT(order_id) FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;,SELECT c.customer_name, COUNT(o.order_id) FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;
SELECT * FROM products ORDER BY price DESC;,SELECT product_id, product_name, price FROM products ORDER BY price DESC;
SELECT * FROM employees WHERE department = 'IT' AND salary > 60000;,SELECT employee_id, name FROM employees WHERE department = 'IT' AND salary > 60000;
SELECT * FROM orders WHERE status = 'shipped' AND total_amount > 1000;,SELECT order_id, customer_id, order_date FROM orders WHERE status = 'shipped' AND total_amount > 1000;
SELECT customer_name, AVG(order_amount) FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;,SELECT c.customer_name, AVG(o.order_amount) FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;
SELECT * FROM products WHERE category = 'Electronics' ORDER BY brand;,SELECT product_id, product_name, price FROM products WHERE category = 'Electronics' ORDER BY brand;
SELECT * FROM employees WHERE department IN ('Sales', 'Marketing');,SELECT employee_id, name, department FROM employees WHERE department IN ('Sales', 'Marketing');
SELECT employee_name, MAX(salary) FROM employees GROUP BY department HAVING MAX(salary) > 80000;,SELECT e.employee_name, MAX(e.salary) FROM employees e GROUP BY e.department HAVING MAX(e.salary) > 80000;
SELECT * FROM products WHERE price BETWEEN 50 AND 100;,SELECT product_name, price FROM products WHERE price BETWEEN 50 AND 100 ORDER BY price LIMIT 10;
SELECT DISTINCT category FROM products;,SELECT category FROM products GROUP BY category;
SELECT customer_name, order_date FROM customers INNER JOIN orders ON customers.customer_id = orders.customer_id WHERE order_date > '2023-01-01';,SELECT c.customer_name, o.order_date FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date > '2023-01-01';
SELECT employee_name, department FROM employees WHERE salary > 70000 ORDER BY salary DESC;,SELECT employee_name, department FROM employees WHERE salary > 70000 ORDER BY salary DESC;
SELECT COUNT(order_id) FROM orders WHERE status = 'pending';,SELECT COUNT(order_id) FROM orders WHERE status = 'pending';
SELECT customer_name FROM customers WHERE city = 'New York' OR city = 'San Francisco';,SELECT customer_name FROM customers WHERE city IN ('New York', 'San Francisco');
SELECT product_name, AVG(price) FROM products GROUP BY category HAVING AVG(price) > 200;,SELECT p.product_name, AVG(p.price) FROM products p GROUP BY p.category HAVING AVG(p.price) > 200;
SELECT * FROM employees WHERE hire_date BETWEEN '2022-01-01' AND '2023-01-01';,SELECT employee_id, name, hire_date FROM employees WHERE hire_date BETWEEN '2022-01-01' AND '2023-01-01';
SELECT order_id, customer_id, order_date FROM orders WHERE customer_id IN (SELECT customer_id FROM customers WHERE country = 'USA');,SELECT o.order_id, o.customer_id, o.order_date FROM orders o WHERE o.customer_id IN (SELECT c.customer_id FROM customers c WHERE c.country = 'USA');
SELECT department, COUNT(employee_id) FROM employees GROUP BY department HAVING COUNT(employee_id) > 5;,SELECT department, COUNT(employee_id) FROM employees GROUP BY department HAVING COUNT(employee_id) > 5;
SELECT product_name, price FROM products WHERE price > 100 ORDER BY price LIMIT 10;,SELECT product_name, price FROM products WHERE price > 100 ORDER BY price LIMIT 10;
SELECT DISTINCT department FROM employees ORDER BY department;,SELECT department FROM employees GROUP BY department ORDER BY department;
SELECT customer_name, order_date FROM customers c JOIN orders o ON c.customer_id = o.customer_id WHERE order_date > '2023-06-01';,SELECT c.customer_name, o.order_date FROM customers c INNER JOIN orders o ON c.customer_id = o.customer_id WHERE o.order_date > '2023-06-01';
SELECT employee_name, salary FROM employees WHERE salary BETWEEN 50000 AND 80000 ORDER BY salary DESC;,SELECT employee_name, salary FROM employees WHERE salary BETWEEN 50000 AND 80000 ORDER BY salary DESC;
SELECT category, AVG(price) FROM products GROUP BY category HAVING AVG(price) > 150;,SELECT category, AVG(price) FROM products GROUP BY category HAVING AVG(price) > 150;
SELECT employee_name, department FROM employees WHERE department IS NOT NULL;,SELECT employee_name, department FROM employees WHERE department IS NOT NULL;
SELECT AVG(salary) FROM employees WHERE department = 'Finance';,SELECT AVG(salary) FROM employees WHERE department = 'Finance';
SELECT customer_name, COUNT(order_id) FROM customers LEFT JOIN orders ON customers.customer_id = orders.customer_id GROUP BY customer_name;,SELECT c.customer_name, COUNT(o.order_id) FROM customers c LEFT JOIN orders o ON c.customer_id = o.customer_id GROUP BY c.customer_name;
SELECT product_name, price FROM products WHERE price > 50 AND category = 'Electronics' ORDER BY price DESC LIMIT 5;,SELECT product_name, price FROM products WHERE price > 50 AND category = 'Electronics' ORDER BY price DESC LIMIT 5;
SELECT employee_name, department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 60000;,SELECT employee_name, department, AVG(salary) FROM employees GROUP BY department HAVING AVG(salary) > 60000;
SELECT * FROM Professor WHERE department_id = 4;,SELECT * FROM Professor p WHERE p.department_id = 4 INDEX(p.department_id); 
SELECT * FROM Student s JOIN Enrollment e ON s.student_id = e.student_id WHERE s.ville = 'Rabat';,SELECT * FROM Student s JOIN Enrollment e ON s.student_id = e.student_id WHERE s.ville = 'Rabat' INDEX(s.ville); 
SELECT * FROM Classroom WHERE building_name = 'Building C' AND room_number = 102;,SELECT * FROM Classroom c WHERE c.building_name = 'Building C' AND c.room_number = 102 INDEX(c.building_name, c.room_number); 
SELECT * FROM Department WHERE department_name = 'Computer Science';,SELECT * FROM Department d WHERE d.department_name = 'Computer Science' INDEX(d.department_name); 
SELECT * FROM Professor p INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Computer Science';,SELECT * FROM Professor p INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Computer Science'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id WHERE c.course_name = 'Mathematics';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id WHERE c.course_name = 'Mathematics'; 
SELECT * FROM Professor p INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Course c ON p.professor_id = c.professor_id WHERE d.department_name = 'Chemistry' AND c.course_name = 'Organic Chemistry';,SELECT * FROM Professor p INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Course c ON p.professor_id = c.professor_id WHERE d.department_name = 'Chemistry' AND c.course_name = 'Organic Chemistry'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id WHERE p.department_id = 14;,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id WHERE p.department_id = 14; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Physics';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Physics'; 
SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id WHERE b.building_name = 'Building H';,SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id WHERE b.building_name = 'Building H'; 
SELECT * FROM Department d INNER JOIN Professor p ON d.department_id = p.department_id INNER JOIN Course c ON p.professor_id = c.professor_id WHERE d.department_name = 'Chemistry' AND c.course_name = 'Analytical Chemistry';,SELECT * FROM Department d INNER JOIN Professor p ON d.department_id = p.department_id INNER JOIN Course c ON p.professor_id = c.professor_id WHERE d.department_name = 'Chemistry' AND c.course_name = 'Analytical Chemistry'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Biology' AND c.course_name = 'Genetics';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Biology' AND c.course_name = 'Genetics'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Electrical Engineering' AND c.course_name = 'Circuit Theory';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Electrical Engineering' AND c.course_name = 'Circuit Theory'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Computer Science' AND c.course_name = 'Database Systems';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Computer Science' AND c.course_name = 'Database Systems'; 
SELECT * FROM Professor WHERE department_id = 6;,SELECT * FROM Professor p WHERE p.department_id = 6 INDEX(p.department_id); 
SELECT * FROM Student s JOIN Enrollment e ON s.student_id = e.student_id WHERE s.ville = 'Tetouan';,SELECT * FROM Student s JOIN Enrollment e ON s.student_id = e.student_id WHERE s.ville = 'Tetouan' INDEX(s.ville); 
SELECT * FROM Classroom WHERE building_name = 'Building E' AND room_number = 104;,SELECT * FROM Classroom c WHERE c.building_name = 'Building E' AND c.room_number = 104 INDEX(c.building_name, c.room_number); 
SELECT * FROM Department WHERE department_name = 'Physics';,SELECT * FROM Department d WHERE d.department_name = 'Physics' INDEX(d.department_name); 
SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 7;,SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 7 INDEX(p.department_id); 
SELECT * FROM Student s WHERE s.student_id = 102;,SELECT * FROM Student s WHERE s.student_id = 102 INDEX(s.student_id); 
SELECT * FROM Course WHERE course_id = 303;,SELECT * FROM Course WHERE course_id = 303 INDEX(course_id); 
SELECT * FROM Classroom WHERE building_name = 'Building F' AND room_number = 105;,SELECT * FROM Classroom c WHERE c.building_name = 'Building F' AND c.room_number = 105 INDEX(c.building_name, c.room_number); 
SELECT * FROM Professor WHERE department_id = 8;,SELECT * FROM Professor p WHERE p.department_id = 8 INDEX(p.department_id); 
SELECT * FROM Student s JOIN Enrollment e ON s.student_id = e.student_id WHERE s.ville = 'Marrakech';,SELECT * FROM Student s JOIN Enrollment e ON s.student_id = e.student_id WHERE s.ville = 'Marrakech' INDEX(s.ville); 
SELECT * FROM Classroom WHERE building_name = 'Building G' AND room_number = 106;,SELECT * FROM Classroom c WHERE c.building_name = 'Building G' AND c.room_number = 106 INDEX(c.building_name, c.room_number); 
SELECT * FROM Department WHERE department_name = 'Chemistry';,SELECT * FROM Department d WHERE d.department_name = 'Chemistry' INDEX(d.department_name); 
SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 9;,SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 9 INDEX(p.department_id); 
SELECT * FROM Classroom WHERE building_name = 'Building E' AND room_number = 104;,SELECT * FROM Classroom WHERE building_name || room_number = 'Building E104'; 
SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 5;,SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 5 INDEX(p.department_id); 
SELECT * FROM Student s WHERE s.student_id = 101;,SELECT * FROM Student s WHERE s.student_id = 101 INDEX(s.student_id); 
SELECT * FROM Course WHERE course_id = 302;,SELECT * FROM Course WHERE course_id = 302 INDEX(course_id); 
SELECT * FROM Classroom WHERE building_name = 'Building D' AND room_number = 103;,SELECT * FROM Classroom c WHERE c.building_name = 'Building D' AND c.room_number = 103 INDEX(c.building_name, c.room_number); 
SELECT * FROM Department WHERE department_name = 'Physics';,SELECT * FROM Department WHERE department_name = 'Physics'; 
SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 7;,SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 7; 
SELECT * FROM Student s WHERE s.student_id = 102;,SELECT * FROM Student WHERE student_id = 102; 
SELECT * FROM Course WHERE course_id = 303;,SELECT * FROM Course WHERE course_id = 303; 
SELECT * FROM Classroom WHERE building_name = 'Building F' AND room_number = 105;,SELECT * FROM Classroom WHERE building_name || room_number = 'Building F105'; 
SELECT * FROM Professor WHERE department_id = 8;,SELECT * FROM Professor WHERE department_id = 8; 
SELECT * FROM Student s JOIN Enrollment e ON s.student_id = e.student_id WHERE s.ville = 'Marrakech';,SELECT * FROM Student WHERE ville = 'Marrakech'; 
SELECT * FROM Classroom WHERE building_name = 'Building G' AND room_number = 106;,SELECT * FROM Classroom WHERE building_name || room_number = 'Building G106'; 
SELECT * FROM Department WHERE department_name = 'Chemistry';,SELECT * FROM Department WHERE department_name = 'Chemistry'; 
SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 9;,SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 9; 
SELECT * FROM Classroom WHERE building_name = 'Building L' AND room_number = 111;,SELECT * FROM Classroom WHERE building_name || room_number = 'Building L111'; 
SELECT * FROM Professor WHERE department_id = 4;,SELECT * FROM Professor WHERE department_id = 4; 
SELECT * FROM Student s JOIN Enrollment e ON s.student_id = e.student_id WHERE s.ville = 'Rabat';,SELECT * FROM Student WHERE ville = 'Rabat'; 
SELECT * FROM Classroom WHERE building_name = 'Building A' AND room_number = 101;,SELECT * FROM Classroom WHERE building_name = 'Building A' AND room_number = 101; 
SELECT * FROM Department WHERE department_name = 'Biology';,SELECT * FROM Department WHERE department_name = 'Biology'; 
SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 10;,SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 10; 
SELECT * FROM Student s JOIN Enrollment e ON s.student_id = e.student_id WHERE s.ville = 'Casablanca';,SELECT * FROM Student WHERE ville = 'Casablanca'; 
SELECT * FROM Classroom WHERE building_name = 'Building B' AND room_number = 102;,SELECT * FROM Classroom WHERE building_name = 'Building B' AND room_number = 102; 
SELECT * FROM Department WHERE department_name = 'Mathematics';,SELECT * FROM Department WHERE department_name = 'Mathematics'; 
SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 11;,SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 11; 
SELECT * FROM Student s WHERE s.student_id = 103;,SELECT * FROM Student WHERE student_id = 103; 
SELECT * FROM Course WHERE course_id = 304;,SELECT * FROM Course WHERE course_id = 304; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Physics' AND c.course_name = 'Quantum Mechanics';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Physics' AND c.course_name = 'Quantum Mechanics'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Chemistry' AND c.course_name = 'Inorganic Chemistry';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Chemistry' AND c.course_name = 'Inorganic Chemistry'; 
SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id WHERE b.building_name = 'Building J' AND d.department_name = 'Computer Science';,SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id WHERE b.building_name = 'Building J' AND d.department_name = 'Computer Science'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Mathematics' AND c.course_name = 'Linear Algebra';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id WHERE d.department_name = 'Mathematics' AND c.course_name = 'Linear Algebra'; 
SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building K' AND p.professor_name = 'Dr. Smith';,SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building K' AND p.professor_name = 'Dr. Smith'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building L' AND d.department_name = 'Physics' AND c.course_name = 'General Relativity';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building L' AND d.department_name = 'Physics' AND c.course_name = 'General Relativity'; 
SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building M' AND d.department_name = 'Chemistry' AND p.professor_name = 'Dr. Johnson';,SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building M' AND d.department_name = 'Chemistry' AND p.professor_name = 'Dr. Johnson'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building N' AND d.department_name = 'Electrical Engineering' AND p.professor_name = 'Dr. Lee';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building N' AND d.department_name = 'Electrical Engineering' AND p.professor_name = 'Dr. Lee'; 
SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building O' AND d.department_name = 'Computer Science' AND p.professor_name = 'Dr. Kim';,SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building O' AND d.department_name = 'Computer Science' AND p.professor_name = 'Dr. Kim'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building P' AND d.department_name = 'Mathematics' AND p.professor_name = 'Dr. Brown';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building P' AND d.department_name = 'Mathematics' AND p.professor_name = 'Dr. Brown'; 
SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building Q' AND d.department_name = 'Physics' AND p.professor_name = 'Dr. Rodriguez';,SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building Q' AND d.department_name = 'Physics' AND p.professor_name = 'Dr. Rodriguez'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building R' AND d.department_name = 'Chemistry' AND p.professor_name = 'Dr. Martinez';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building R' AND d.department_name = 'Chemistry' AND p.professor_name = 'Dr. Martinez'; 
SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building S' AND d.department_name = 'Electrical Engineering' AND p.professor_name = 'Dr. Turner';,SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building S' AND d.department_name = 'Electrical Engineering' AND p.professor_name = 'Dr. Turner'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building T' AND d.department_name = 'Computer Science' AND p.professor_name = 'Dr. Garcia';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building T' AND d.department_name = 'Computer Science' AND p.professor_name = 'Dr. Garcia'; 
SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building U' AND d.department_name = 'Mathematics' AND p.professor_name = 'Dr. White';,SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building U' AND d.department_name = 'Mathematics' AND p.professor_name = 'Dr. White'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building V' AND d.department_name = 'Physics' AND p.professor_name = 'Dr. Garcia';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building V' AND d.department_name = 'Physics' AND p.professor_name = 'Dr. Garcia'; 
SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building W' AND d.department_name = 'Chemistry' AND p.professor_name = 'Dr. Perez';,SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building W' AND d.department_name = 'Chemistry' AND p.professor_name = 'Dr. Perez'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building X' AND d.department_name = 'Electrical Engineering' AND p.professor_name = 'Dr. Allen';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building X' AND d.department_name = 'Electrical Engineering' AND p.professor_name = 'Dr. Allen'; 
SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building Y' AND d.department_name = 'Computer Science' AND p.professor_name = 'Dr. Carter';,SELECT * FROM Classroom cl INNER JOIN Building b ON cl.building_id = b.building_id INNER JOIN Department d ON cl.department_id = d.department_id INNER JOIN Professor p ON d.department_id = p.department_id WHERE b.building_name = 'Building Y' AND d.department_name = 'Computer Science' AND p.professor_name = 'Dr. Carter'; 
SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building Z' AND d.department_name = 'Mathematics' AND p.professor_name = 'Dr. Thompson';,SELECT * FROM Student s INNER JOIN Enrollment e ON s.student_id = e.student_id INNER JOIN Course c ON e.course_id = c.course_id INNER JOIN Professor p ON c.professor_id = p.professor_id INNER JOIN Department d ON p.department_id = d.department_id INNER JOIN Building b ON d.department_id = b.department_id WHERE b.building_name = 'Building Z' AND d.department_name = 'Mathematics' AND p.professor_name = 'Dr. Thompson'; 
SELECT * FROM Classroom WHERE building_name = 'Building C' AND room_number = 103;,SELECT * FROM Classroom WHERE building_name = 'Building C' AND room_number = 103; 
SELECT * FROM Department WHERE department_name = 'Chemical Engineering';,SELECT * FROM Department WHERE department_name = 'Chemical Engineering'; 
SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 12;,SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 12; 
SELECT * FROM Student s JOIN Enrollment e ON s.student_id = e.student_id WHERE s.ville = 'Agadir';,SELECT * FROM Student WHERE ville = 'Agadir'; 
SELECT * FROM Classroom WHERE building_name = 'Building D' AND room_number = 104;,SELECT * FROM Classroom WHERE building_name = 'Building D' AND room_number = 104; 
SELECT * FROM Department WHERE department_name = 'Electrical Engineering';,SELECT * FROM Department WHERE department_name = 'Electrical Engineering'; 
SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 13;,SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 13; 
SELECT * FROM Student s WHERE s.student_id = 104;,SELECT * FROM Student WHERE student_id = 104; 
SELECT * FROM Course WHERE course_id = 305;,SELECT * FROM Course WHERE course_id = 305; 
SELECT * FROM Classroom WHERE building_name = 'Building E' AND room_number = 105;,SELECT * FROM Classroom WHERE building_name = 'Building E' AND room_number = 105; 
SELECT * FROM Classroom WHERE building_name = 'Building C' AND room_number = 102;,SELECT * FROM Classroom WHERE building_name || room_number = 'Building C102'; 
SELECT * FROM Department WHERE department_name = 'Computer Science';,SELECT * FROM Department WHERE department_name = 'Computer Science'; 
SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 5;,SELECT * FROM Professor p INNER JOIN Course c ON p.professor_id = c.professor_id WHERE p.department_id = 5; 
SELECT * FROM Student s WHERE s.student_id = 101;,SELECT * FROM Student WHERE student_id = 101; 
SELECT * FROM Classroom WHERE building_name = 'Building L' AND room_number = 111;,SELECT * FROM Classroom c WHERE c.building_name = 'Building L' AND c.room_number = 111; 
SELECT * FROM employees WHERE department_id = 5;,CREATE INDEX idx_department ON employees(department_id);
SELECT COUNT(*) FROM orders;,CREATE INDEX idx_orders_id ON orders(id);
SELECT * FROM products ORDER BY price DESC;,CREATE INDEX idx_products_price ON products(price);
SELECT * FROM customers WHERE email LIKE '%gmail.com%';,CREATE INDEX idx_customers_email ON customers(email);
SELECT AVG(salary) FROM employees;,CREATE INDEX idx_employees_salary ON employees(salary);
SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';,CREATE INDEX idx_orders_order_date ON orders(order_date);
SELECT * FROM products WHERE category_id IN (1, 2, 3);,CREATE INDEX idx_products_category_id ON products(category_id);
SELECT MAX(price) FROM products;,CREATE INDEX idx_products_price ON products(price);
SELECT * FROM employees WHERE salary > 50000;,CREATE INDEX idx_employees_salary ON employees(salary);
SELECT * FROM customers ORDER BY registration_date DESC LIMIT 10;,CREATE INDEX idx_customers_registration_date ON customers(registration_date);
SELECT * FROM orders WHERE customer_id = 1001;,CREATE INDEX idx_orders_customer_id ON orders(customer_id);
SELECT MIN(quantity) FROM order_items;,CREATE INDEX idx_order_items_quantity ON order_items(quantity);
SELECT * FROM suppliers WHERE country = 'USA';,CREATE INDEX idx_suppliers_country ON suppliers(country);
SELECT * FROM products WHERE stock_quantity < 10;,CREATE INDEX idx_products_stock_quantity ON products(stock_quantity);
SELECT SUM(total_amount) FROM invoices;,CREATE INDEX idx_invoices_total_amount ON invoices(total_amount);
SELECT * FROM employees WHERE hire_date > '2022-01-01';,CREATE INDEX idx_employees_hire_date ON employees(hire_date);
SELECT * FROM products WHERE price BETWEEN 50 AND 100;,CREATE INDEX idx_products_price ON products(price);
SELECT AVG(rating) FROM product_reviews;,CREATE INDEX idx_product_reviews_rating ON product_reviews(rating);
SELECT * FROM customers WHERE city = 'London' AND country = 'UK';,CREATE INDEX idx_customers_city_country ON customers(city, country);
SELECT * FROM orders WHERE status = 'Shipped';,CREATE INDEX idx_orders_status ON orders(status);
SELECT AVG(salary) FROM employees;,CREATE MATERIALIZED VIEW mv_avg_salary AS SELECT AVG(salary) FROM employees;
SELECT product_id, SUM(quantity_sold) FROM sales GROUP BY product_id;,CREATE MATERIALIZED VIEW mv_sales_summary AS SELECT product_id, SUM(quantity_sold) FROM sales GROUP BY product_id;
SELECT customer_id, COUNT(order_id) FROM orders GROUP BY customer_id;,CREATE MATERIALIZED VIEW mv_order_count AS SELECT customer_id, COUNT(order_id) FROM orders GROUP BY customer_id;
SELECT city, AVG(population) FROM cities GROUP BY city;,CREATE MATERIALIZED VIEW mv_avg_population AS SELECT city, AVG(population) FROM cities GROUP BY city;
SELECT category_id, MAX(price) FROM products GROUP BY category_id;,CREATE MATERIALIZED VIEW mv_max_price_by_category AS SELECT category_id, MAX(price) FROM products GROUP BY category_id;
SELECT supplier_id, AVG(stock_quantity) FROM inventory GROUP BY supplier_id;,CREATE MATERIALIZED VIEW mv_avg_stock_by_supplier AS SELECT supplier_id, AVG(stock_quantity) FROM inventory GROUP BY supplier_id;
SELECT employee_id, COUNT(project_id) FROM project_assignments GROUP BY employee_id;,CREATE MATERIALIZED VIEW mv_project_assignment_count AS SELECT employee_id, COUNT(project_id) FROM project_assignments GROUP BY employee_id;
SELECT department_id, AVG(salary) FROM employees GROUP BY department_id;,CREATE MATERIALIZED VIEW mv_avg_salary_by_department AS SELECT department_id, AVG(salary) FROM employees GROUP BY department_id;
SELECT region, MAX(revenue) FROM sales GROUP BY region;,CREATE MATERIALIZED VIEW mv_max_revenue_by_region AS SELECT region, MAX(revenue) FROM sales GROUP BY region;
SELECT product_id, MIN(price) FROM products GROUP BY product_id;,CREATE MATERIALIZED VIEW mv_min_price_by_product AS SELECT product_id, MIN(price) FROM products GROUP BY product_id;
CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), country VARCHAR(50));,CREATE TABLE denormalized_customer_orders ( order_id INT PRIMARY KEY, order_date DATE, customer_id INT, customer_name VARCHAR(50), country VARCHAR(50));
CREATE TABLE products ( product_id INT PRIMARY KEY, product_name VARCHAR(50), category_id INT, FOREIGN KEY (category_id) REFERENCES categories(category_id));,CREATE TABLE denormalized_products_categories ( product_id INT PRIMARY KEY, product_name VARCHAR(50), category_id INT, category_name VARCHAR(50));
CREATE TABLE employees ( employee_id INT PRIMARY KEY, employee_name VARCHAR(50), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(department_id));,CREATE TABLE denormalized_employees_departments ( employee_id INT PRIMARY KEY, employee_name VARCHAR(50), department_id INT, department_name VARCHAR(50));
CREATE TABLE orders ( order_id INT PRIMARY KEY, order_date DATE, customer_id INT, FOREIGN KEY (customer_id) REFERENCES customers(customer_id));,CREATE TABLE denormalized_orders_customers ( order_id INT PRIMARY KEY, order_date DATE, customer_id INT, customer_name VARCHAR(50), country VARCHAR(50));
CREATE TABLE invoices ( invoice_id INT PRIMARY KEY, invoice_date DATE, customer_id INT, total_amount DECIMAL(10, 2), FOREIGN KEY (customer_id) REFERENCES customers(customer_id));,CREATE TABLE denormalized_invoices_customers ( invoice_id INT PRIMARY KEY, invoice_date DATE, customer_id INT, customer_name VARCHAR(50), country VARCHAR(50), total_amount DECIMAL(10, 2));
CREATE TABLE products ( product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(10, 2), category_id INT, FOREIGN KEY (category_id) REFERENCES categories(category_id));,CREATE TABLE denormalized_products_prices ( product_id INT PRIMARY KEY, product_name VARCHAR(50), price DECIMAL(10, 2), category_id INT, category_name VARCHAR(50));
CREATE TABLE order_items ( order_item_id INT PRIMARY KEY, order_id INT, product_id INT, quantity INT, price DECIMAL(10, 2), FOREIGN KEY (order_id) REFERENCES orders(order_id), FOREIGN KEY (product_id) REFERENCES products(product_id));,CREATE TABLE denormalized_orders_items_products ( order_id INT PRIMARY KEY, order_date DATE, customer_id INT, total_amount DECIMAL(10, 2), order_item_id INT, product_id INT, quantity INT, price DECIMAL(10, 2), product_name VARCHAR(50));
CREATE TABLE employees ( employee_id INT PRIMARY KEY, employee_name VARCHAR(50), department_id INT, FOREIGN KEY (department_id) REFERENCES departments(department_id));,CREATE TABLE denormalized_employees_salaries ( employee_id INT PRIMARY KEY, employee_name VARCHAR(50), department_id INT, salary DECIMAL(10, 2));
CREATE TABLE customers ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), country VARCHAR(50));,CREATE TABLE denormalized_customers_orders_items_products ( customer_id INT PRIMARY KEY, customer_name VARCHAR(50), country VARCHAR(50), order_id INT, order_date DATE, total_amount DECIMAL(10, 2), order_item_id INT, product_id INT, quantity INT, price DECIMAL(10, 2), product_name VARCHAR(50));
SELECT * FROM employees WHERE department_id = 5 AND salary > 50000;,CREATE INDEX idx_employees_department_salary ON employees(department_id, salary);
SELECT product_id, AVG(price) FROM products GROUP BY product_id;,CREATE MATERIALIZED VIEW mv_avg_price_by_product AS SELECT product_id, AVG(price) FROM products GROUP BY product_id; CREATE INDEX idx_products_price ON products(price);
SELECT customer_id, COUNT(order_id) FROM orders WHERE order_date > '2023-01-01' GROUP BY customer_id;,SELECT customer_id, COUNT(order_id) FROM orders WHERE order_date > '2023-01-01' GROUP BY customer_id; CREATE INDEX idx_orders_order_date ON orders(order_date);
SELECT supplier_id, MAX(stock_quantity) FROM products GROUP BY supplier_id;,SELECT supplier_id, MAX(stock_quantity) FROM products GROUP BY supplier_id; CREATE MATERIALIZED VIEW mv_max_stock_by_supplier AS SELECT supplier_id, MAX(stock_quantity) FROM products GROUP BY supplier_id;
SELECT * FROM customers WHERE country = 'USA' AND city = 'New York';,CREATE INDEX idx_customers_country_city ON customers(country, city); SELECT * FROM customers WHERE country = 'USA' AND city = 'New York';
SELECT employee_id, AVG(salary) FROM employees GROUP BY employee_id;,CREATE MATERIALIZED VIEW mv_avg_salary_by_employee AS SELECT employee_id, AVG(salary) FROM employees GROUP BY employee_id; CREATE INDEX idx_employees_salary ON employees(salary);
SELECT category_id, COUNT(product_id) FROM products GROUP BY category_id;,SELECT category_id, COUNT(product_id) FROM products GROUP BY category_id; CREATE INDEX idx_products_category ON products(category_id);
SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';,CREATE INDEX idx_orders_order_date ON orders(order_date); SELECT * FROM orders WHERE order_date BETWEEN '2023-01-01' AND '2023-12-31';
SELECT department_id, AVG(salary) FROM employees GROUP BY department_id;,CREATE MATERIALIZED VIEW mv_avg_salary_by_department AS SELECT department_id, AVG(salary) FROM employees GROUP BY department_id; CREATE INDEX idx_employees_department_salary ON employees(department_id, salary);
SELECT supplier_id, COUNT(product_id) FROM products WHERE stock_quantity > 0 GROUP BY supplier_id;,SELECT supplier_id, COUNT(product_id) FROM products WHERE stock_quantity > 0 GROUP BY supplier_id; CREATE INDEX idx_products_stock_quantity ON products(stock_quantity);
SELECT supplier_id, AVG(price) FROM products GROUP BY supplier_id;,CREATE INDEX idx_products_supplier_avg_price ON products(supplier_id, AVG(price));
SELECT * FROM customers WHERE country = 'Germany' AND phone LIKE '+49%';,CREATE INDEX idx_customers_phone ON customers(phone);
SELECT department_id, MIN(salary) FROM employees GROUP BY department_id;,CREATE MATERIALIZED VIEW mv_min_salary_by_department AS SELECT department_id, MIN(salary) FROM employees GROUP BY department_id; CREATE INDEX idx_employees_department_min_salary ON employees(department_id, salary);
SELECT product_id, MAX(profit) FROM sales GROUP BY product_id;,CREATE INDEX idx_sales_profit ON sales(profit);
SELECT customer_id, MAX(shipping_cost) FROM orders GROUP BY customer_id;,CREATE INDEX idx_orders_shipping_cost ON orders(shipping_cost);
SELECT product_id, SUM(quantity_sold) FROM sales GROUP BY product_id;,CREATE INDEX idx_products_quantity_sold ON sales(quantity_sold);
SELECT category_id, AVG(rating) FROM products GROUP BY category_id;,CREATE MATERIALIZED VIEW mv_avg_rating_by_category AS SELECT category_id, AVG(rating) FROM products GROUP BY category_id; CREATE INDEX idx_products_category_avg_rating ON products(category_id, AVG(rating));
SELECT * FROM customers WHERE country = 'France' AND birthdate < '1990-01-01';,CREATE INDEX idx_customers_birthdate ON customers(birthdate);
SELECT category_id, MAX(stock_quantity) FROM inventory GROUP BY category_id;,CREATE MATERIALIZED VIEW mv_max_stock_quantity_by_category AS SELECT category_id, MAX(stock_quantity) FROM inventory GROUP BY category_id; CREATE INDEX idx_inventory_category_max_stock ON inventory(category_id, MAX(stock_quantity));
SELECT employee_id, COUNT(DISTINCT project_id) FROM project_assignments GROUP BY employee_id;,CREATE INDEX idx_project_assignments_employee_project ON project_assignments(employee_id, project_id);
SELECT customer_id, MAX(order_date) FROM orders GROUP BY customer_id;,CREATE INDEX idx_orders_customer_order_date ON orders(customer_id, order_date);
SELECT * FROM products WHERE category_id = 3 AND discount > 0.1;,CREATE INDEX idx_products_category_discount ON products(category_id, discount);
SELECT region, AVG(revenue) FROM sales GROUP BY region;,CREATE INDEX idx_sales_region_revenue ON sales(region, revenue);
SELECT department_id, COUNT(DISTINCT employee_id) FROM employees GROUP BY department_id;,CREATE INDEX idx_employees_department ON employees(department_id);
SELECT category_id, MAX(price) FROM products GROUP BY category_id;,CREATE INDEX idx_products_category_price ON products(category_id, price);
SELECT supplier_id, COUNT(product_id) FROM products WHERE stock_quantity > 50 GROUP BY supplier_id;,CREATE INDEX idx_products_supplier_stock_quantity_high ON products(supplier_id, stock_quantity);
SELECT * FROM products WHERE category_id = 4 AND rating >= 4.5;,CREATE INDEX idx_products_category_rating ON products(category_id, rating);
SELECT customer_id, AVG(quantity) FROM orders GROUP BY customer_id;,CREATE MATERIALIZED VIEW mv_avg_quantity_by_customer AS SELECT customer_id, AVG(quantity) FROM orders GROUP BY customer_id; CREATE INDEX idx_orders_customer_quantity ON orders(customer_id, quantity);
SELECT * FROM employees WHERE department_id = 2 AND location = 'City';,CREATE INDEX idx_employees_location ON employees(location);
SELECT supplier_id, MIN(stock_quantity) FROM inventory GROUP BY supplier_id;,CREATE INDEX idx_inventory_supplier_stock_quantity ON inventory(supplier_id, stock_quantity);
SELECT * FROM products WHERE supplier_id = 8 AND discount > 0.05;,CREATE INDEX idx_products_supplier_discount ON products(supplier_id, discount);
SELECT supplier_id, AVG(price) FROM products GROUP BY supplier_id;,CREATE MATERIALIZED VIEW mv_avg_price_by_supplier AS SELECT supplier_id, AVG(price) FROM products GROUP BY supplier_id; CREATE INDEX idx_products_supplier_avg_price ON products(supplier_id, AVG(price));
SELECT category_id, MAX(stock_quantity) FROM inventory GROUP BY category_id;,CREATE INDEX idx_inventory_category_max_stock ON inventory(category_id, MAX(stock_quantity));
SELECT manager_id, COUNT(employee_id) FROM employees GROUP BY manager_id;,CREATE INDEX idx_employees_age ON employees(age);
SELECT supplier_id, AVG(price) FROM products WHERE country = 'USA' GROUP BY supplier_id;,CREATE MATERIALIZED VIEW mv_avg_discount_by_category AS SELECT category_id, AVG(discount) FROM products GROUP BY category_id; CREATE INDEX idx_products_category_avg_discount ON products(category_id, AVG(discount));
SELECT product_id, MIN(discount) FROM sales GROUP BY product_id;,CREATE INDEX idx_sales_product_min_quantity_sold ON sales(product_id, MIN(quantity_sold));
SELECT region, AVG(quantity) FROM sales GROUP BY region;,CREATE INDEX idx_sales_region_revenue ON sales(region, AVG(revenue));
SELECT customer_id, COUNT(DISTINCT order_id) FROM orders WHERE payment_status = 'Paid' GROUP BY customer_id;,CREATE INDEX idx_orders_customer_payment_status ON orders(customer_id, payment_status);
SELECT job_title, MAX(salary) FROM employees GROUP BY job_title;,CREATE MATERIALIZED VIEW mv_max_salary_by_job_title AS SELECT job_title, MAX(salary) FROM employees GROUP BY job_title; CREATE INDEX idx_employees_job_title_max_salary ON employees(job_title, MAX(salary));
SELECT supplier_id, AVG(price) FROM products WHERE region = 'North America' GROUP BY supplier_id;,CREATE INDEX idx_products_supplier_region ON products(supplier_id, region);
SELECT category_id, MIN(stock_quantity) FROM inventory GROUP BY category_id;,CREATE MATERIALIZED VIEW mv_avg_salary_by_department AS SELECT department_id, AVG(salary) FROM employees GROUP BY department_id; CREATE INDEX idx_employees_department_avg_salary ON employees(department_id, AVG(salary));
SELECT * FROM employees WHERE department_id = 3 AND age >= 30;,CREATE INDEX idx_inventory_expiry_date ON inventory(expiry_date);
SELECT category_id, AVG(discount) FROM products GROUP BY category_id;,CREATE INDEX idx_products_category_avg_discount ON products(category_id, AVG(discount));
SELECT customer_id, MAX(last_purchase_date) FROM orders GROUP BY customer_id;,CREATE INDEX idx_orders_customer_last_purchase_date ON orders(customer_id, last_purchase_date);
SELECT product_id, MIN(quantity_sold) FROM sales GROUP BY product_id;,CREATE INDEX idx_sales_product_min_quantity_sold ON sales(product_id, MIN(quantity_sold));
SELECT product_id, COUNT(*) FROM inventory WHERE expiry_date < '2024-01-01' GROUP BY product_id;,CREATE INDEX idx_inventory_expiry_date ON inventory(expiry_date);
SELECT supplier_id, AVG(price) FROM products WHERE country = 'India' GROUP BY supplier_id;,CREATE INDEX idx_products_supplier_country_price ON products(supplier_id, country, price);
SELECT * FROM employees WHERE department_id = 4 AND location = 'Town';,CREATE INDEX idx_employees_department_location ON employees(department_id, location);
SELECT product_id, SUM(profit) FROM sales GROUP BY product_id;,CREATE INDEX idx_sales_product_sum_profit ON sales(product_id, SUM(profit));
SELECT supplier_id, MAX(stock_quantity) FROM inventory GROUP BY supplier_id;,CREATE INDEX idx_inventory_supplier_max_stock ON inventory(supplier_id, MAX(stock_quantity));
SELECT * FROM customers WHERE country = 'United Kingdom' AND email LIKE '%@example.com%';,CREATE INDEX idx_customers_country_email ON customers(country, email);
SELECT department_id, COUNT(employee_id) FROM employees GROUP BY department_id;,CREATE INDEX idx_employees_department ON employees(department_id);
SELECT category_id, MIN(price) FROM products GROUP BY category_id;,CREATE INDEX idx_products_category_min_price ON products(category_id, MIN(price));
SELECT supplier_id, COUNT(DISTINCT product_id) FROM products WHERE stock_quantity > 100 GROUP BY supplier_id;,CREATE INDEX idx_products_supplier_stock_quantity_high ON products(supplier_id, stock_quantity);
SELECT * FROM products WHERE rating >= 4.0 AND discount > 0.2;,CREATE INDEX idx_products_rating_discount ON products(rating, discount);
SELECT employee_id, AVG(salary) FROM employees WHERE age > 35 GROUP BY employee_id;,CREATE INDEX idx_employees_age_salary ON employees(age, salary);
SELECT product_id, MIN(price) FROM products GROUP BY product_id HAVING COUNT(*) > 1;,CREATE INDEX idx_products_product_id_price ON products(product_id, price);
SELECT supplier_id, MAX(stock_quantity) FROM inventory WHERE stock_quantity > 50 GROUP BY supplier_id;,CREATE INDEX idx_inventory_supplier_max_stock ON inventory(supplier_id, MAX(stock_quantity));
SELECT * FROM customers WHERE country = 'Australia' AND birthdate < '1985-01-01';,CREATE INDEX idx_customers_country_email_birthdate ON customers(country, email, birthdate);
SELECT category_id, AVG(price) FROM products GROUP BY category_id;,CREATE INDEX idx_products_category_avg_price ON products(category_id, AVG(price));
SELECT supplier_id, COUNT(product_id) FROM products GROUP BY supplier_id HAVING COUNT(*) > 5;,CREATE INDEX idx_products_supplier_count_stock_quantity_high ON products(supplier_id, COUNT(DISTINCT stock_quantity)) WHERE stock_quantity > 100;
SELECT region, MIN(revenue) FROM sales GROUP BY region;,CREATE INDEX idx_sales_region_min_revenue ON sales(region, MIN(revenue));
SELECT product_id, AVG(rating) FROM products GROUP BY product_id;,CREATE INDEX idx_products_avg_rating ON products(product_id, AVG(rating));
SELECT supplier_id, MIN(price) FROM products WHERE country = 'China' GROUP BY supplier_id;,CREATE INDEX idx_products_supplier_country_price ON products(supplier_id, country, price);
SELECT customer_id, COUNT(order_id) FROM orders GROUP BY customer_id HAVING COUNT(order_id) > 3;,CREATE INDEX idx_orders_customer_count_orders ON orders(customer_id, COUNT(order_id)) WHERE COUNT(order_id) > 3;
SELECT category_id, MAX(stock_quantity) FROM inventory WHERE stock_quantity > 20 GROUP BY category_id;,CREATE INDEX idx_inventory_stock_quantity ON inventory(stock_quantity);
SELECT * FROM employees WHERE job_title = 'Software Engineer' AND salary > 80000;,CREATE INDEX idx_employees_job_salary ON employees(job_title, salary);
SELECT product_id, COUNT(*) FROM sales WHERE sale_date < '2023-01-01' GROUP BY product_id;,CREATE INDEX idx_sales_sale_date ON sales(sale_date);
SELECT customer_id, MIN(total_amount) FROM orders GROUP BY customer_id;,CREATE INDEX idx_orders_customer_min_total_amount ON orders(customer_id, MIN(total_amount));
SELECT supplier_id, AVG(price) FROM products WHERE region = 'Europe' GROUP BY supplier_id;,CREATE INDEX idx_products_supplier_region_price ON products(supplier_id, region, price);
SELECT * FROM customers WHERE country = 'Brazil' AND last_purchase_date IS NOT NULL;,CREATE INDEX idx_customers_country_last_purchase_date ON customers(country, last_purchase_date);
SELECT department_id, MAX(salary) FROM employees GROUP BY department_id;,CREATE INDEX idx_employees_department_max_salary ON employees(department_id, MAX(salary));
SELECT category_id, MIN(stock_quantity) FROM inventory WHERE stock_quantity > 10 GROUP BY category_id;,CREATE INDEX idx_inventory_stock_quantity_high ON inventory(stock_quantity) WHERE stock_quantity > 10;
SELECT product_id, COUNT(*) FROM sales WHERE profit > 500 GROUP BY product_id;,CREATE INDEX idx_sales_profit ON sales(profit);
SELECT * FROM employees WHERE department_id = 5 AND age < 40;,CREATE INDEX idx_employees_department_age ON employees(department_id, age);
SELECT product_id, MAX(discount) FROM sales GROUP BY product_id;,CREATE INDEX idx_products_max_discount ON products(product_id, MAX(discount));
SELECT supplier_id, COUNT(DISTINCT product_id) FROM products WHERE stock_quantity > 30 GROUP BY supplier_id;,CREATE INDEX idx_sales_product_supplier_count_stock_quantity_high ON sales(product_id, supplier_id, COUNT(DISTINCT stock_quantity)) WHERE stock_quantity > 30;
SELECT * FROM products WHERE category_id = 5 AND price < 100;,CREATE INDEX idx_products_category_price ON products(category_id, price);
SELECT customer_id, AVG(total_amount) FROM orders WHERE payment_status = 'Pending' GROUP BY customer_id;,CREATE INDEX idx_orders_customer_pending_avg_total_amount ON orders(customer_id, AVG(total_amount)) WHERE payment_status = 'Pending';
SELECT * FROM customers WHERE country = 'Japan' AND email LIKE '%@example.com%';,CREATE INDEX idx_customers_country_email ON customers(country, email);
SELECT product_id, MIN(rating) FROM products GROUP BY product_id;,CREATE INDEX idx_products_min_rating ON products(product_id, MIN(rating));
SELECT * FROM orders WHERE order_date BETWEEN '2023-07-01' AND '2023-12-31';,CREATE INDEX idx_orders_order_date ON orders(order_date);
SELECT supplier_id, MAX(price) FROM products WHERE country = 'Japan' GROUP BY supplier_id;,CREATE INDEX idx_products_supplier_country_max_price ON products(supplier_id, country, MAX(price));
SELECT customer_id, COUNT(order_id) FROM orders GROUP BY customer_id HAVING COUNT(order_id) < 5;,CREATE INDEX idx_orders_customer_count_orders_less_than_5 ON orders(customer_id, COUNT(order_id)) WHERE COUNT(order_id) < 5;
SELECT category_id, AVG(stock_quantity) FROM inventory WHERE stock_quantity > 15 GROUP BY category_id;,CREATE INDEX idx_inventory_avg_stock_quantity ON inventory(category_id, AVG(stock_quantity)) WHERE stock_quantity > 15;
SELECT * FROM employees WHERE job_title = 'Data Scientist' AND salary > 90000;,CREATE INDEX idx_employees_job_salary ON employees(job_title, salary);
SELECT product_id, SUM(quantity_sold) FROM sales WHERE sale_date < '2023-01-01' GROUP BY product_id;,CREATE INDEX idx_sales_sale_date_sum_quantity_sold ON sales(sale_date, SUM(quantity_sold)) WHERE sale_date < '2023-01-01';
SELECT customer_id, MAX(total_amount) FROM orders GROUP BY customer_id;,CREATE INDEX idx_orders_customer_max_total_amount ON orders(customer_id, MAX(total_amount));
SELECT supplier_id, MIN(price) FROM products WHERE region = 'Asia' GROUP BY supplier_id;,CREATE INDEX idx_products_supplier_region_avg_price ON products(supplier_id, region, AVG(price));
SELECT * FROM customers WHERE country = 'Mexico' AND last_purchase_date IS NOT NULL;,CREATE INDEX idx_customers_country_last_purchase_date ON customers(country, last_purchase_date);
SELECT department_id, MIN(salary) FROM employees GROUP BY department_id;,CREATE INDEX idx_employees_department_min_salary ON employees(department_id, MIN(salary));
SELECT category_id, MAX(price) FROM products WHERE price > 50 GROUP BY category_id;,CREATE INDEX idx_products_category_max_price ON products(category_id, MAX(price)) WHERE price > 50;
SELECT product_id, COUNT(*) FROM sales WHERE profit > 1000 GROUP BY product_id;,CREATE INDEX idx_sales_profit ON sales(profit);
SELECT * FROM employees WHERE department_id = 7 AND age < 35;,CREATE INDEX idx_employees_department_age ON employees(department_id, age);
SELECT product_id, AVG(discount) FROM sales GROUP BY product_id;,CREATE INDEX idx_products_max_discount ON products(product_id, MAX(discount));
SELECT supplier_id, COUNT(DISTINCT product_id) FROM products WHERE stock_quantity > 20 GROUP BY supplier_id;,CREATE INDEX idx_sales_product_supplier_count_stock_quantity_high ON sales(product_id, supplier_id, COUNT(DISTINCT stock_quantity)) WHERE stock_quantity > 20;
SELECT * FROM products WHERE category_id = 7 AND rating >= 4.2;,CREATE INDEX idx_products_category_rating ON products(category_id, rating);
SELECT customer_id, AVG(quantity) FROM orders WHERE order_date BETWEEN '2023-07-01' AND '2023-12-31' GROUP BY customer_id;,CREATE INDEX idx_orders_customer_avg_quantity ON orders(customer_id, AVG(quantity)) WHERE order_date BETWEEN '2023-07-01' AND '2023-12-31';
SELECT region, MAX(revenue) FROM sales GROUP BY region;,CREATE INDEX idx_sales_region_max_revenue ON sales(region, MAX(revenue));
SELECT * FROM products WHERE supplier_id = 15 AND discount > 0.15;,CREATE INDEX idx_products_supplier_discount_high ON products(supplier_id, discount) WHERE supplier_id = 15 AND discount > 0.15;
